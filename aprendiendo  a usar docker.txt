docker pull <nombre de la imagen> = se usa para descargar la imagen

docker run <nombre de la imagen> = se usa para iniciar a correr un contenedor

docker images = se usa para ver todas las imagenes instaladas

docker images | head = muestra las primeras imagenes en la lista de instaladas 

docker ps = muestra los contenedores que estan corriendo actualmente

docker ps -a = muestro todos  los contenedores que has corrido

docker start <Container ID> = se usa para iniciar un contenedor desde el container ID
para recuperar lo que tenia antes de pararse

docker logs <container ID> = se usa para ver el log de los contenedores

docker logs -f <container ID> = se usa para ver el log de los contenedores y sigue viendo el log

docker exec <container ID> = ejecuta un comando dentro de un contenedor que esta corriendo

docker exec -it <container ID> = ejecuta una seseion interactiva con el contenedor que esta 
corriendo, la "i" crea una sesion interactiva y la "t" va a habilitar uns terminal

docker exec -it <container ID> bash = se usa para acceder al bash del contenedor y empezar a introducir comandos como usuario root

docker stop <docker ID> = detiene un contenedor

docker stop <docker ID1> <docker ID2> <docker ID3>= detiene varios contenedores a la vez

docker run -d <nombre de la imagen> = inicia a correr un contenedor en background

docker build -t <tag del contenedor> = asi se contruye la imagen

docker run --name <nombre del contenedor> -d -p <puerto de la computadora>:<puerto del contenedor que se quiere escuchar> <ID de la imagen> = este comando lo que
hace es empezar a correr un contenedor en back ground y comunica un puerto del
contenedor con el de la computadora

docker run --name <nombre del contenedor> -e POSTGRES_PASSWORD=<contraseña del usuario de postgres> -d -p <puerto de la computadora>:<puerto del contenedor que se quiere escuchar> <ID de la imagen> = este comando es parecido al de arriba perose le agrega otra cosa para dale una contraseña al usuario de postgres

docker run -d -v <ruta de origen de lo que va dentro del contenedor>:<ruta de donde se guardaran los cambios> -p <puerto de la computadora>:<puerto del conetendor que se quiere escuchar> = con este comando se guardan los cambios que se hicieron en el contenedor en una base de datos en la ruta donde se guardan los cambios


docker image rm -f $(docker images | grep "<none>" | awk '{print$3}') = con este se borran todas las imagenes vacias

docker rmi <ID de la imagen> = se usa para eliminar una imagen especifica

docker rmi $(docker images -q) = se usa para eliminar todas las imagenes

docker stop $(docker ps -a -q) = se usa para detener todos los contenedores

docker rm $(docker ps -a -q) = se usa para eliminar todos los contenedores

docker run -v <ruta de los que se quiere guardar al contenedor>:<ruta donde se colocara lo que se quiere en el contenedor> = esto se usa para reescribir cosas de la computadora al contenedor o del contenedor a la computadora

docker save -o <save image to path> <image name> = esto se usa para guardar una imagen en un archivo para lluego correrlo en otra imagen

docker load -i <path to image tar file> = con esto se corre una imagen que habia sido guardada y fue traida a la pc como un archivo

docker network create <nombre de la red de conetenedores> = esto se usa para cuando se quieran usar varios contenedores a la vez que trabajen en conjunto, se crea una red que contendra esos contenedores

docker run -d --network <nombre de la red> --network-alias <alias del contenedor en la red> <nombre o ID de la imagen> = asi es es comando base para correr un conetenedor en una red de docker, sin embargo se le puede agregar mas comandos a la linea.

docker run -d --network=<nombre de la red> --net-alias <alias del contenedor en la red> -e POSTGRES_PASSWORD=<contraseña del usuario de postgres> <nombre o ID de la imagen> = asi seria por ejemplo el codigo para correr uncontenedor de postgres en background en la red de docker que se creo

docker run -d \
--network=<nombre de la red>\
--net-alias <alias del contenedor en la red>\
-e POSTGRES_PASSWORD=<password del usuario de postgres>\
<ID de la imagen oo su nombre con su tag correspondiente> = asi se ve mas limpio en la terminal

docker run -d\
--network=dockernetworktesis\
--net-alias postgres\
-e POSTGRES_PASSWORD=postgres\
-v postgresdata:/var/lib/postgresql\
ac47df06c03d

docker-compose -f <nombre del archivo .yaml> up -d = inicia los contendores en background con la configuracion del archivo 

docker-compose -f <nombre del archivo .yaml> down = detiene los ontenedores en el archivo

IMPORTANTE!!!!: si por alguna razon no se inicia el servicio de docker al instalarlo en la raspberry, se debe correr el comando "sudo rpi-update"

PASOS PARA CONFIGURAR DOCKER LUEGO DE INSTALARLO

crear un grupo de docker
sudo groupadd docker

agregar el usuario al grupo de docker
sudo usermod -aG docker ${USER}

reloguear el usuario(si esto no se puede hacer por falta de la contrasena, solo reinciia la raspberry, o puedes ingresar como usuario root "sudo su" y luego cambiar la contrasena con "passwd")
su -s ${USER}

SE DEBE REVISAR MUY BIEN EL LINK DEL CURL AL INSTALAR DOCKER-COMPOSE DE LA DOCUMENTACION, ES NECESARIO METERSE AL REPOSITORIO DE GITHUB Y COPIAR EL LINK DE LA VERSION QUE SE QUIERE



